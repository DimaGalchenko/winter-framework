plugins {
    id 'java'
    id 'org.owasp.dependencycheck' version '11.1.0'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

apply from: 'version.gradle'

group = 'com.codeus.winter'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jacoco {
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

dependencies {
    // Reflection
    implementation "org.reflections:reflections:${versions.reflections}"

    // Apache Commons
    implementation "org.apache.commons:commons-lang3:${versions.commons_lang}"
    implementation "org.apache.commons:commons-collections4:${versions.commons_collections}"

    // Log4j
    implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"

    // Jakarta
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    // Owasp
    implementation 'org.owasp:dependency-check-core:11.1.0'

    // YAML
    implementation "org.yaml:snakeyaml:${versions.snakeyaml}"

    // JUnit Jupiter
    testImplementation platform("org.junit:junit-bom:${versions.junit}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
}

checkstyle {
    toolVersion = versions.checkstyle
}

tasks.withType(Checkstyle).configureEach {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(21)
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

wrapper {
    gradleVersion '8.8'
}

dependencyCheck {
    suppressionFile = '${project.rootDir}/dependency-check-suppressions.xml'
    nvd {
        apiKey = System.getenv("NVD_API_KEY") ?: "INVALID_NVD_API_KEY"
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'DimaGalchenko_winter-framework'
        property 'sonar.organization', 'dimagalchenko'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}
